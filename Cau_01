#include <iostream>
using namespace std;

#define MAX 50

void input(int arr[MAX], int& n) {
	// Nhap so luong phan tu
	do
	{
		cout << "Nhap so luong phan tu: ";
		cin >> n;
		if (n <= 0 || n > 50 || cin.fail()) {
			cin.clear();
			cin.ignore(1000, '\n');
			cout << "So luong phan tu khong hop le, vui long nhap lai!\n";
		}
	} while (n <= 0 || n > 50 || cin.fail());

	// Nhap phan tu
	for (int i = 0; i < n; i++) {
		cout << "Nhap phan tu thu [" << i + 1 << "]: ";
		cin >> arr[i];
	}
}


void output(int arr[MAX],const int n) {
	cout << "Danh sach phan tu trong mang: \n";
	for (int i = 0; i < n; i++) {
		cout << arr[i] << "\t";
	}
	cout << "\n";
}

void findX(int arr[MAX], const int n) {
	int x;
	bool found = false;
	cout << "Nhap gia tri phan tu can tim kiem: ";
	cin >> x;
	for (int i = 0; i < n; i++) {
		if (arr[i] == x) {
			cout << "Tim thay x o vi tri " << i << "\n";
			found = true;
		}
	}
	if (found != true) cout << "Khong tim thay phan tu trong danh sach\n";
}

// Them 1 phan tu tai vi tri i
void them1PhanTu(int arr[MAX], int& n) {
	cout << "Nhap gia tri phan tu can them: ";
	int a, pos;
	cin >> a;
	cout << "Nhap vi tri can them vao danh sach: ";
	cin >> pos;
	if (pos < 0 || pos > n) {
		cout << "Vi tri chen khong hop le!\n";
		return;
	}
	for (int i = n; i > pos; i--) {
		arr[i] = arr[i - 1]; 
	}
	arr[pos] = a;
	n++;
	cout << "Danh sach sau khi them phan tu\n";
	output(arr, n);
}

// Xoa 1 phan tu tai vi tri i
void xoa1PhanTu(int arr[MAX], int& n) {
	int pos;
	cout << "Nhap vi tri phan tu can xoa khoi danh sach: ";
	cin >> pos;
	if (pos < 0 || pos >= n) {
		cout << "Vi tri khong hop le!\n";
		return;
	}
	for (int i = pos; i < n; i++) {
		arr[i] = arr[i + 1];
	}
	n--;
	cout << "Danh sach sau khi xoa phan tu\n";
	output(arr, n);
}

int main() {
	int arr[MAX], chan[MAX], le[MAX];
	int n, x;
	int i;

	// Nhap phan tu
	input(arr, n);

	// Xuat phan tu
	output(arr, n);

	// Tim 1 phan tu trong danh sach
	findX(arr, n);

	// Them 1 phan tu vao vi tri i trong danh sach
	them1PhanTu(arr, n);

	// Xoa 1 phan tu
	xoa1PhanTu(arr, n);

	return 1;
}
